/**********代码高亮*************/
//高亮代码显示
function qkHighlightjs(){
    
    if(!qk_global.highlightjs_show) return;
    
	let pres =  document.getElementsByTagName('pre'); //替换标签class
	if(typeof(pres) == "object"){
	    Array.from(pres).forEach( (pre) => {
	        
	        if (pre.className.indexOf('qk-highlightjs') <= -1){
                pre.classList.add("qk-highlightjs");
            }
            
            if (pre.className.indexOf('line-numbers') <= -1){
                pre.classList.add("line-numbers");
            }
            
            if (!pre.className.match(/(\w+)-theme/)){
                pre.classList.add(qk_global.highlightjs_theme + "-theme");
            }
        });
	}
}

qkHighlightjs();
//addLoadEvent(qkHighlightjs)

//举报
var qkArticlereport = new Vue({
    el:'.article-report',
    data:{
        post_id:qk_global.post_id,
    },
    methods:{
        report(e){ 
            if(!qktoken) return this.$createModal('login');
            this.$createModal("report",{
                //keepAlive:false,
                props:{
                    post_id:this.post_id
                }
            })
        },
    }
})

var qkArticleFooter = new Vue({
    el:'.article-footer',
    data:{
        locked:false,
        voteLocked:false,
        post_id:qk_global.post_id,
        like:0,
        is_like:false
    },
    async mounted(){
        
    },
    methods:{
        collect(e){ 
            if(!qktoken) return this.$createModal('login');
            if(this.locked == true) return;
            
            this.locked = true
            
            this.$http.post(qk_rest_url+'userFavorites','&post_id='+this.post_id).then(res => {
                
                this.setNum(e,res.data.count);
                this.locked = false;
                this.$message({ message: res.data.message , type: 'success' });
                
            }).catch(err => {
                this.locked = false
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        vote(type,e) {
            if(!qktoken) return this.$createModal('login');
            
            if(this.voteLocked == true) return;
            this.voteLocked = true;
            
            //let e = event;
            this.$http.post(qk_rest_url+'postVote','type='+type+'&post_id='+this.post_id).then(res=>{
                this.setNum(e,res.data.like);
                this.voteLocked = false;
                this.$message({ message: res.data.message , type: 'success' });
            }).catch(err => {
                this.voteLocked = false;
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        goComment() {
            this.$scrollTo('#comments', 300, {offset: -85})
        },
        setNum(e,num){
            if(e.target.tagName != 'DIV'){
                e = e.target.parentNode.parentNode;
            }else{
                e = e.target.parentNode;
            }
            
            if(e.classList.contains('active')){
                e.classList.remove("active");
            }else{
                e.classList.add("active");
                
            }
            
            e.setAttribute('num',num)
        },
        report(){ 
            if(!qktoken) return this.$createModal('login');
            this.$createModal("report",{
                //keepAlive:false,
                props:{
                    post_id:this.post_id
                }
            })
        },
    }
})

/**************评论********************/
var qkComments = new Vue({
    el:'#comments',
    data:{
        locked:false,
        voteLocked:false,
        parentId:0,
        commentContainerID:0, //容器id
        showEmoji:false,
        //分页数据
        selector:".comment-list",
        api:"getCommentList",
        param:{
            post_id:qk_global.post_id,
            orderby:'desc',
            author:false
        }
    },
    async mounted(){
        
    },
    methods:{
        submit(){ 
            if(!qktoken) return this.$createModal('login');
            if(this.locked == true) return;
            
            this.locked = true
            
            let param = {
                'comment_post_ID':qk_global.post_id,
                'comment':this.$refs.textarea.value,
                'comment_parent':this.parentId,
            }

            this.$http.post(qk_rest_url+'sendComment',param).then(res => {
                if(this.parentId){
                    let children = this.$el.querySelector('#comment-'+this.commentContainerID + ' .children')
                    if(children) {
                        children.insertAdjacentHTML('beforeend', res.data)
                    }else{
                        this.$el.querySelector('#comment-'+this.commentContainerID + ' #respond').insertAdjacentHTML('beforebegin','<ul class="children">' + res.data + '</ul>')
                    }
                }else{
                    this.$refs.commentList.insertAdjacentHTML('afterbegin', res.data)
                }
                
                this.$refs.textarea.value = ''
                this.locked = false
                
                if(this.$refs.commentEmpty){
                    this.$refs.commentEmpty.remove()
                }
                

            }).catch(err => {
                this.locked = false
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        resetting() {
            this.parentId = 0;
            this.commentContainerID = 0;
            
            //Object.assign(this.$data, this.$options.data.bind(this)())
            
            this.$el.insertAdjacentElement("afterbegin",this.$refs.respond)
            this.$refs.textarea.placeholder ="只是一直在等你而已，才不是想被评论呢～";
        },
        reply(comment_id,parent_id){
            
            if(this.parentId == comment_id) {
                return this.resetting()
            }
            //被回复的id
            this.parentId = comment_id;
            this.commentContainerID = parent_id;
            
            document.querySelector('#comment-'+parent_id).appendChild(this.$refs.respond)
            
            var name = event.target.parentNode.parentNode.parentNode.querySelector('.user-name').textContent//event.path[4].querySelector('.user-name').innerText;
            
            this.$refs.textarea.placeholder ="回复 @"+ name +" :";
            this.$refs.textarea.focus()
        },
        vote(type,comment_id,e) {
            if(!qktoken) return this.$createModal('login');
            
            if(this.voteLocked == true) return;
            this.voteLocked = true;
            
            //let e = event;
            this.$http.post(qk_rest_url+'commentVote','type='+type+'&comment_id='+comment_id).then(res=>{
                //let parent = e.target.parentNode;
                if(e.classList.contains('voted')){
                    e.classList.remove("voted");
                }else{
                    e.classList.add("voted");
                    
                }
                
                this.voteLocked = false;
                
                e.querySelector('span').innerText = ' ' + res.data.like
                // e.target.innerHtml = ' ' + res.data.like
            }).catch(err => {
                this.voteLocked = false;
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        changeOrder(order){
            if(this.param.orderby == order) return;
            this.resetting();
            this.param.orderby = order;
            this.$refs.commentPageNav.load(1,'',true)
        },
        tabClick(bool) {
            if(this.param.author == bool) return;
            this.resetting();
            this.param.author = bool;
            this.$refs.commentPageNav.load(1,'',true);
        },
        handleClick(emoji) {
            this.$refs.textarea.value +="["+ emoji.name +"]";
            this.$refs.textarea.focus()
        }
    }
})

//文章META
var singleMeta = new Vue({
    el:'.post-meta',
    data:{
        is_follow:false,
        is_self:true,
        locked:false,
    },
    mounted(){
        if(!qk_global.author_id) return;
        this.$http.post(qk_rest_url+'checkFollow','user_id='+qk_global.author_id).then(res=>{
            this.is_self = res.data.is_self
            this.is_follow = res.data.is_follow

            if(typeof postAuthor == 'object'){

                postAuthor.is_follow = res.data.is_follow

            }
        })
    },
    methods:{
        onFollow(){
            if(!qktoken) return this.$createModal('login');
            if(this.locked == true) return
            this.locked = true
            
            this.$http.post(qk_rest_url+'userFollow','user_id='+qk_global.author_id).then(res=>{
                this.is_follow = !this.is_follow
                
                if(typeof postAuthor == 'object'){
                    postAuthor.is_follow = this.is_follow
    
                }
                
                this.locked = false
                
                this.$message({ message: '操作成功' , type: 'success' });
            }).catch(err=>{
                this.locked = false
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        whisper(){
            if(!qktoken) return this.$createModal('login');
            window.location.href = `message?whisper=${qk_global.author_id}`;
        }
    }
})

//关于作者小工具
var postAuthor = new Vue({
    el:'.qk_widget_author',
    data:{
        is_follow:false,
        locked:false,
    },
    methods:{
        onFollow(){
            if(!qktoken) return this.$createModal('login');
            if(this.locked == true) return
            this.locked = true
                
            this.$http.post(qk_rest_url+'userFollow','user_id='+qk_global.author_id).then(res=>{
                this.is_follow = !this.is_follow
                
                if(typeof singleMeta == 'object'){
                    singleMeta.is_follow = this.is_follow
    
                }
                
                this.locked = false
                
                this.$message({ message: '操作成功' , type: 'success' });
            }).catch(err=>{
                this.locked = false
                
                this.$message({ message: err.response.data.message , type: 'error' });
            })
        },
        whisper(){
            if(!qktoken) return this.$createModal('login');
            window.location.href = `message?whisper=${qk_global.author_id}`;
        }
    }
})

//视频章节
var videoChapters = new Vue({
    el:'#video-chapters',
    data:{
        list:[],
        index:0,
        post_id:qk_global.post_id,
    },
    mounted(){
        if(!this.$refs.videoChapters) return
        this.$http.post(qk_rest_url+'getVideoList','post_id='+this.post_id).then(res=>{
            this.list = res.data.list;
        })

    },
    methods:{
        
    }
})

var episodePlayerWrap = new Vue({
    el:'.single-episode .qk-player-wrap',
    data:{
        data:'',
        videos:[],
        user:'',
        player:'',
        videoIndex:0,
        currentVideoId:qk_global.post_id, //当前播放视频id
        post_id:qk_global.post_id,
        url:'',
        videoList:[],
        allowList:[],
        listStyle:'',
        preview:false,
    },
    mounted(){
        if(!this.$refs.player) return
        this.listStyle =  JSON.parse(localStorage.getItem('videoListStyle')) || false;

        this.$http.post(qk_rest_url+'getVideoList','post_id='+this.post_id).then(res=>{
            this.data = res.data;
            this.videos = res.data.list;
            this.videoList = this.convertDataToVideoList(this.videos);
            this.user = res.data.current_user
            this.allowList = this.user.allowList
            this.videoIndex = this.videoList.findIndex((item) => {
                return item.id == this.post_id;
            })
            
            if(this.videoList.length) {
                if(this.allowList[this.videoIndex] == true){
                    
                    this.player = new MoePlayer({
                        container: document.getElementById('moeplayer'),
                        autoplay:true,
                        autonext:true,
                        theme:"var(--theme-color)",
                        videoList:this.videoList,
                        videoIndex:this.videoIndex,
                        danmaku: {
                            id: qk_global.post_id,
                            sendApi: qk_rest_url + 'sendDanmaku',
                            getApi: qk_rest_url + 'getDanmaku',
                        },
                    });
                    
                    this.player.on('switchVideo', (i)=>{
                        this.videoIndex = i
                        
                        this.currentVideoId = this.videoList[this.videoIndex].id
                        // 更新浏览器地址
                        //window.history.pushState(null, '', this.videoList[this.videoIndex].link);
                        qkCurrentPageReload(this.videoList[this.videoIndex].link);
                    })
                    
                    this.player.on('next', (i)=>{
                        // this.videoIndex = i
                        // this.currentVideoId = this.videoList[this.videoIndex].id
                        
                        qkCurrentPageReload(this.videoList[i].link);
                    })
                    
                    if(this.user.free_video) {
                         this.player.toast.add(`
                            <div class="title">您正在享受会员免费观看视频特权</div>
                            <div class="desc">今日剩余免费观看 `+this.user.free_count +` 次</div>`
                        ,10000)
                    }
                    
                //试看
                }else if(this.videoList[this.videoIndex].preview_url){
                    
                    this.preview = true;
                    
                    this.player = new MoePlayer({
                        container: document.getElementById('moeplayer'),
                        autoplay:true,
                        autonext:false,
                        theme:"var(--theme-color)",
                        video:this.videoList[this.videoIndex],
                        danmaku: {
                            id: qk_global.post_id,
                            sendApi: qk_rest_url + 'sendDanmaku',
                            getApi: qk_rest_url + 'getDanmaku',
                        },
                    });
                    
                    this.player.on('ended', (i)=>{
                        this.preview = false;
                    })
                    
                    this.player.toast.add(`
                    <div class="prompt-bar-container">
                        <div>
                            <div class="title">本片是限制内容</div>
                            <div class="desc">试看中 · <span onclick="createModal('vip',{size:720})" style=" cursor: pointer; ">成为会员</span> 免费看本片</div>
                        </div>
                        <div class="action-wrap">
                            <div class="button" onclick="episodePlayerWrap.changePreview()">完整观看</div>
                        </div>
                    </div>
                    `
                    ,9e6)
                }
            }
        })

    },
    methods:{
        switchVideo(video){
            
            //if(this.currentVideoId == video.id) return;
            
            // this.videoIndex = this.videoList.findIndex((item) => {
            //     return item.url == video.url;
            // })

            //this.currentVideoId = video.id;
            
            qkCurrentPageReload(video.link);
            
            // this.player.switchVideo({ 
            //     url:video.url,
            //     pic:video.thumb,
            //     title:video.title,
            // });
            
        },
        pay(allpay) {
            if(!qktoken && this.allowList[this.videoIndex] == false && !this.user.not_login_pay && this.user.type == 'money'){
                this.login();
            }else if(this.allowList[this.videoIndex] == false){
                if(this.user.type == 'credit' || this.user.type == 'money'){
                    if(!allpay) {
                        qkpay({
                            'title': this.videoList[this.videoIndex].title,
                            'order_price': this.user.value,
                            'order_type':'video',
                            'order_key':this.videoIndex,
                            'post_id':this.data.id,
                            'chapter_id':this.post_id,
                            'type':this.user.type,
                            'tag':'付费视频'
                        },this.user.type)
                    }else{
                        qkpay({
                            'title': this.data.title,
                            'order_price': this.user.total_value,
                            'order_type':'video',
                            'post_id':this.data.id,
                            'type':this.user.type,
                            'tag':'付费视频'
                        },this.user.type)
                    }
                    
                }else if(this.user.type == 'password') {
                    this.$createModal('passwordVerify',{
                        size:312,
                        loading:false,
                        props:{
                            data:qk_global.password_verify
                        },
                    })
                }else{
                    this.$message({ message: '您无权观看，请升级权限！' , type: 'warning' });
                }
                return 
            }
        },
        login(){
            if(!qktoken) return this.$createModal('login');
        },
        changeListStyle() {
            this.listStyle = !this.listStyle;
            localStorage.setItem('videoListStyle', this.listStyle);
        },
        changePreview() {
            this.preview = false;
            this.player.pause();
        },
        getEpisodeNumber(chapterIndex, videoIndex) {
            let episodeNumber = 1;
            for (let i = 0; i < chapterIndex; i++) {
                episodeNumber += this.videos[i].video_list.length;
            }
            episodeNumber += videoIndex;
            return episodeNumber;
        },
        convertDataToVideoList(data) {
            let videoList = [];
            
            // 检查数据是否存在以及是否为数组
            if (data && Array.isArray(data)) {
                data.forEach(item => {
                    // 检查章节数据是否存在以及是否为数组
                    if (item && item.video_list && Array.isArray(item.video_list)) {
                        item.video_list.forEach(video => {
                            videoList.push({
                                id: video.id,
                                url: video.url ? video.url : video.preview_url,
                                preview_url:video.preview_url,
                                pic: video.pic,
                                title: video.title,
                                link:video.link
                            });
                        });
                    }
                });
            }
            
            return videoList;
        }
    }
})

var playerWrap = new Vue({
    el:'.single-post .qk-player-wrap',
    data:{
        data:'',
        videos:[],
        user:'',
        player:'',
        videoIndex:0,
        post_id:qk_global.post_id,
        url:'',
        videoList:[],
        allowList:[],
        listStyle:'',
        preview:false,
    },
    mounted(){
        if(!this.$refs.player) return
        this.listStyle =  JSON.parse(localStorage.getItem('videoListStyle')) || false;

        this.$http.post(qk_rest_url+'getVideoList','post_id='+this.post_id).then(res=>{
            this.data = res.data;
            this.videos = res.data.list;
            this.videoList = this.convertDataToVideoList(this.videos);
            this.user = res.data.current_user
            this.allowList = this.user.allowList
            if(this.videoList.length){
            
                this.player = new MoePlayer({
                    container: document.getElementById('moeplayer'),
                    autoplay:true,
                    autonext:false,
                    theme:"var(--theme-color)",
                    videoList:this.videoList,
                    videoIndex:this.videoIndex,
                    danmaku: {
                        id: qk_global.post_id,
                        sendApi: qk_rest_url + 'sendDanmaku',
                        getApi: qk_rest_url + 'getDanmaku',
                    },
                });
                
                this.player.on('switchVideo', (i)=>{
                    this.player.template.toastWrap.innerHTML = "";
                    this.player.toast.timerInfo.forEach((timer) => {
                        clearTimeout(timer);
                    });
                    this.player.toast.timerInfo = [];
                    this.player.toast.timeoutIndex = 0;
                })
                
                // this.player.on('next', (i)=>{
                //     this.videoIndex = i
                // })
                
                if(this.user.free_video) {
                     this.player.toast.add(`
                        <div class="title">您正在享受会员免费观看视频特权</div>
                        <div class="desc">今日剩余免费观看 `+this.user.free_count +` 次</div>`
                    ,10000)
                }
                
                this.player.on('loadedmetadata', () => {
                    if(this.videoList[this.videoIndex].preview_url && this.allowList[this.videoIndex] == false){
                    
                        this.preview = true;
                        
                        this.player.on('ended', (i)=>{
                            this.preview = false;
                        })
                        
                        this.player.toast.add(`
                        <div class="prompt-bar-container">
                            <div>
                                <div class="title">本片是限制内容</div>
                                <div class="desc">试看中 · <span onclick="createModal('vip',{size:720})" style=" cursor: pointer; ">成为会员</span> 免费看本片</div>
                            </div>
                            <div class="action-wrap">
                                <div class="button" onclick="playerWrap.changePreview()">完整观看</div>
                            </div>
                        </div>
                        `
                        ,9e6)
                    }
                });
                
                if(this.videoList[this.videoIndex].preview_url && this.allowList[this.videoIndex] == false){
                    this.preview = true;
                }
            }
        })
    },
    methods:{
        switchVideo(video,index){
            this.videoIndex = index
            
            if(video.url || video.preview_url){
                this.player.switchVideo({ 
                    url:video.url ? video.url : video.preview_url,
                    pic:video.pic,
                    title:video.title,
                })
            }else{
                this.changePreview()
            }
        },
        pay(allpay) {
            if(!qktoken && this.allowList[this.videoIndex] == false && !this.user.not_login_pay && this.user.type == 'money'){
                this.login();
            }else if(this.allowList[this.videoIndex] == false){
                if(this.user.type == 'credit' || this.user.type == 'money'){
                    if(!allpay) {
                        qkpay({
                            'title': this.videoList[this.videoIndex].title,
                            'order_price': this.user.value,
                            'order_type':'video',
                            'order_key':this.videoIndex,
                            'post_id':this.data.id,
                            'type':this.user.type,
                            'tag':'付费视频'
                        },this.user.type)
                    }else{
                        qkpay({
                            'title': this.data.title,
                            'order_price': this.user.total_value,
                            'order_type':'video',
                            'post_id':this.data.id,
                            'type':this.user.type,
                            'tag':'付费视频'
                        },this.user.type)
                    }
                    
                }else if(this.user.type == 'password') {
                    this.$createModal('passwordVerify',{
                        size:312,
                        loading:false,
                        props:{
                            data:qk_global.password_verify
                        },
                    })
                }else{
                    this.$message({ message: '您无权观看，请升级权限！' , type: 'warning' });
                }
                return 
            }
        },
        login(){
            if(!qktoken) return this.$createModal('login');
        },
        changeListStyle() {
            this.listStyle = !this.listStyle;
            localStorage.setItem('videoListStyle', this.listStyle);
        },
        changePreview() {
            this.preview = false;
            this.player.pause();
        },
        getEpisodeNumber(chapterIndex, videoIndex) {
            let episodeNumber = 1;
            for (let i = 0; i < chapterIndex; i++) {
                episodeNumber += this.videos[i].video_list.length;
            }
            episodeNumber += videoIndex;
            return episodeNumber;
        },
        convertDataToVideoList(data) {
            let videoList = [];
            
            // 检查数据是否存在以及是否为数组
            if (data && Array.isArray(data)) {
                data.forEach(item => {
                    // 检查章节数据是否存在以及是否为数组
                    if (item && item.video_list && Array.isArray(item.video_list)) {
                        item.video_list.forEach(video => {
                            videoList.push({
                                id: video.id,
                                url: video.url ? video.url : video.preview_url,
                                preview_url:video.preview_url,
                                pic: video.pic,
                                title: video.title,
                                link:video.link
                            });
                        });
                    }
                });
            }
            
            return videoList;
        }
    }
})

const downloadBoxMixin = {
    login(){
        if(!qktoken) return this.$createModal('login');
    },
    go(){
        if(!qktoken && !this.data.current_user.can.allow && !this.data.current_user.not_login_pay && this.data.current_user.can.type == 'money'){
            this.login()
        }else if(!this.data.current_user.can.allow){
            if(this.data.current_user.can.type == 'comment'){
                this.$message({ message: '评论并刷新后免费下载！' , type: 'warning' });
            }else if(this.data.current_user.can.type == 'credit' || this.data.current_user.can.type == 'money'){
                qkpay({
                    'title': this.data.title,
                    'order_price': this.data.current_user.can.value,
                    'order_type':'xiazai',
                    'order_key':this.index,
                    'post_id':qk_global.post_id,
                    'type':this.data.current_user.can.type,
                    'tag':'资源下载'
                },this.data.current_user.can.type)
            }else if(this.data.current_user.can.type == 'password') {
                this.$createModal('passwordVerify',{
                    size:312,
                    loading:false,
                    props:{
                        data:qk_global.password_verify
                    },
                })
            }else{
                this.$message({ message: '您无权下载，请升级权限！' , type: 'warning' });
            }
            return 

        }else{
            window.open(this.data.link)
        }
    },
    payVip() {
        this.$createModal('vip',{size:720})
    },
    changeTab(index) {
        if(this.index == index) return
        this.index = index
        this.data = this.list[this.index]
        this.$nextTick(() => { //nextTick页面更新后渲染
            this.TabscrollTo(this.index)
        })
    },
    TabscrollTo(index) {

        var dom = this.$refs.scrollTab.children[0]

        var clientWidth = this.$refs.scrollTab.clientWidth //父元素宽度scroll-tab-wrapper
        var offsetLeft =  dom.children[index].offsetLeft //li 距离左侧宽度
        var offsetWidth = dom.children[index].offsetWidth //li 当前元素宽度
        
        if(clientWidth > dom.clientWidth) return;

        var left = offsetLeft - clientWidth/2 + offsetWidth/2
        left = left < 0 ? 0 : left  //最左

        left = left + clientWidth >= dom.scrollWidth ? dom.scrollWidth - clientWidth : left //最右
        this.scroll.scrollTo(-left, 0, 300)
    }
}

var qkWidgetDownloadBox = new Vue({
    el:'#qk-download-box',
    data:{
        list:'',
        data:'',
        show:false,
        index:0,
        scroll:''
    },
    mounted(){
        if(this.$refs.downloadBox){
            this.getList()
            
        }
    },
    methods:{
        getList(){

            let data = {
                'post_id':qk_global.post_id,
            }

            this.$http.post(qk_rest_url+'getDownloadData',data).then(res=>{
                qkDownloadBox.list = this.list = res.data
                qkDownloadBox.data = this.data = this.list[0]
                
                this.$nextTick(() => {
                    if(this.$refs.scrollTab) {
                        this.scroll = new BScroll(this.$refs.scrollTab, {
                            scrollX: true,
                            probeType: 3, // listening scroll event
                            click:true    
                        })
                    }
                });
            })
        },
        login:downloadBoxMixin.login,
        go:downloadBoxMixin.go,
        payVip:downloadBoxMixin.payVip,
        changeTab:downloadBoxMixin.changeTab,
        TabscrollTo:downloadBoxMixin.TabscrollTo,
    }
})

var qkDownloadBox = new Vue({
    el:'#download-box',
    data:{
        list:'',
        data:'',
        show:false,
        index:0,
        scroll:''
    },
    mounted(){
        if(this.$refs.downloadBox){
            this.getList()
            this.$nextTick(() => {
                if(this.$refs.scrollTab) {
                    this.scroll = new BScroll(this.$refs.scrollTab, {
                        scrollX: true,
                        probeType: 3, // listening scroll event
                        click:true    
                    })
                }
            });
        }
    },
    methods:{
        getList(){

            let data = {
                'post_id':qk_global.post_id,
            }
            
            !this.data && !qkWidgetDownloadBox.$refs.downloadBox && this.$http.post(qk_rest_url+'getDownloadData',data).then(res=>{
                this.list = res.data
                this.data = this.list[0]
                
            })
        },
        login:downloadBoxMixin.login,
        go:downloadBoxMixin.go,
        payVip:downloadBoxMixin.payVip,
        changeTab:downloadBoxMixin.changeTab,
        TabscrollTo:downloadBoxMixin.TabscrollTo,
    }
})

